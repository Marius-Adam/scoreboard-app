{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Player.js","components/AddPlayerForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Stats","props","totalPlayers","players","length","totalPoints","reduce","total","player","score","className","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","setState","prevState","Date","now","tick","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","Counter","index","changeScore","Player","removePlayer","id","name","AddPlayerForm","value","handleValueChange","e","target","handleSubmit","preventDefault","addPlayer","onSubmit","type","placeholder","onChange","App","prevPlayerId","handleRemovePlayer","filter","p","handleAddPlayer","alert","handleChangeScore","delta","map","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aaed7b41.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Stats = (props) => {\r\n  const totalPlayers = props.players.length;\r\n  const totalPoints = props.players.reduce((total, player) => {\r\n    return total + player.score;\r\n  }, 0);\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Players:</td>\r\n          <td>{totalPlayers}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total Points:</td>\r\n          <td>{totalPoints}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Stopwatch extends Component {\r\n  state = {\r\n    isRunning: false,\r\n    elapsedTime: 0,\r\n    previousTime: 0,\r\n  };\r\n\r\n  handleStopwatch = () => {\r\n    this.setState((prevState) => ({\r\n      isRunning: !this.state.isRunning,\r\n    }));\r\n    if (!this.state.isRunning) {\r\n      this.setState({\r\n        previousTime: Date.now(),\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(() => this.tick(), 100);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.isRunning) {\r\n      const now = Date.now();\r\n      this.setState((prevState) => ({\r\n        previousTime: now,\r\n        elapsedTime: prevState.elapsedTime + now - this.state.previousTime,\r\n      }));\r\n    }\r\n  };\r\n  handleReset = () => {\r\n    this.setState({\r\n      elapsedTime: 0,\r\n    });\r\n  };\r\n  render() {\r\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        <h2>Stopwatch</h2>\r\n\r\n        <span className=\"stopwatch-time\">{seconds}</span>\r\n        <button onClick={this.handleStopwatch}>\r\n          {this.state.isRunning ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        <button onClick={this.handleReset}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Stopwatch;\r\n","import React from \"react\";\r\nimport Stats from \"./Stats\";\r\nimport Stopwatch from \"./Stopwatch\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header>\r\n      <Stats players={props.players} />\r\n      <h1>{props.title}</h1>\r\n      <Stopwatch />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Counter = (props) => {\r\n  let index = props.index;\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <button\r\n        className=\"counter-action decrement\"\r\n        onClick={() => props.changeScore(index, -0.5)}\r\n      >\r\n        {\" \"}\r\n        -{\" \"}\r\n      </button>\r\n      <span className=\"counter-score \">{props.score}</span>\r\n      <button\r\n        className=\"counter-action increment\"\r\n        onClick={() => props.changeScore(index, 0.5)}\r\n      >\r\n        {\" \"}\r\n        +{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nconst Player = (props) => {\r\n  return (\r\n    <div className=\"player\">\r\n      <span className=\"player-name\">\r\n        <button\r\n          className=\"remove-player\"\r\n          onClick={() => props.removePlayer(props.id)}\r\n        >\r\n          x\r\n        </button>\r\n        {props.name}\r\n      </span>\r\n      <Counter\r\n        score={props.score}\r\n        changeScore={props.changeScore}\r\n        index={props.index}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddPlayerForm extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handleValueChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addPlayer(this.state.value);\r\n    this.setState({ value: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a player's name\"\r\n          onChange={this.handleValueChange}\r\n          value={this.state.value}\r\n        />\r\n\r\n        <input type=\"submit\" placeholder=\"Add player\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPlayerForm;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Player from \"./Player\";\nimport AddPlayerForm from \"./AddPlayerForm\";\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"JavaScript\",\n        score: 0,\n        id: 1,\n      },\n      {\n        name: \"CSS5\",\n        score: 0,\n        id: 2,\n      },\n      {\n        name: \"HTML5\",\n        score: 0,\n        id: 3,\n      },\n      {\n        name: \"React\",\n        score: 0,\n        id: 4,\n      },\n    ],\n  };\n\n  //player create ID\n\n  prevPlayerId = 4;\n\n  handleRemovePlayer = (id) => {\n    this.setState((prevState) => {\n      return {\n        players: prevState.players.filter((p) => p.id !== id),\n      };\n    });\n  };\n\n  handleAddPlayer = (name) => {\n    if (name === \"\") {\n      alert(\"Please enter a valid name!\");\n    } else {\n      this.setState((prevState) => {\n        return {\n          players: [\n            ...prevState.players,\n            {\n              name,\n              score: 0,\n              id: (this.prevPlayerId += 1),\n            },\n          ],\n        };\n      });\n    }\n  };\n\n  handleChangeScore = (index, delta) => {\n    this.setState((prevState) => ({\n      score: (prevState.players[index].score += delta),\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Header title=\"Scoreboard\" players={this.state.players} />\n\n        {/*Players list*/}\n        {this.state.players.map((player, index) => (\n          <Player\n            key={player.id.toString()}\n            name={player.name}\n            score={player.score}\n            index={index}\n            changeScore={this.handleChangeScore}\n            removePlayer={this.handleRemovePlayer}\n            id={player.id}\n          />\n        ))}\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}